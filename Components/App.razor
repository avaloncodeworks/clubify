<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["Clubify.styles.css"]" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <ImportMap />
    <HeadOutlet @rendermode="PageRenderMode" />
</head>

<body>
    <Routes @rendermode="PageRenderMode" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>

    <script>
        window.registerClickOutsideHandler = (elementId, dotNetHelper) => {
            const element = document.getElementById(elementId);
            if (!element) return;

            const onClick = (event) => {
                if (!element.contains(event.target)) {
                    dotNetHelper.invokeMethodAsync('CloseDropdown');
                }
            };

            document.addEventListener('click', onClick);

            window.clickOutsideHandlers = window.clickOutsideHandlers || {};
            window.clickOutsideHandlers[elementId] = onClick;
        };

        window.unregisterClickOutsideHandler = (elementId) => {
            if (window.clickOutsideHandlers && window.clickOutsideHandlers[elementId]) {
                document.removeEventListener('click', window.clickOutsideHandlers[elementId]);
                delete window.clickOutsideHandlers[elementId];
            }
        };

        window.focusElementById = (elementId) => {
            const el = document.getElementById(elementId);
            if (el) {
                el.focus();
            }
        };

        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape') {
                DotNet.invokeMethodAsync('Clubify', 'CloseDropdownOnEscape');
            }
        });

                window.registerScreenSizeHandler = (dotNetHelper) => {
                const checkScreenSize = () => {
                const isMobile = window.innerWidth <= 768;
                dotNetHelper.invokeMethodAsync('UpdateScreenSize', isMobile);
            };

            // Run on initial load
            checkScreenSize();

            // Add listener for resize
            window.addEventListener('resize', checkScreenSize);
        };
    </script>

    <script src="_framework/blazor.web.js"></script>
</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? PageRenderMode =>
        HttpContext.AcceptsInteractiveRouting() ? InteractiveServer : null;
}
