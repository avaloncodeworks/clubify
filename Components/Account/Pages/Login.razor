@page "/account/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authentication
@using Clubify.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in | Clubify</PageTitle>

<!-- Background video (optional) -->
<div class="video-container">
    <video autoplay muted loop playsinline class="video-background">
        <source src="videos/club_background_1.mp4" type="video/mp4">
    </video>
    <div class="video-overlay"></div>
</div>

<div class="container d-flex justify-content-center align-items-start" style="min-height: 100vh; padding-top: 5rem;">
    <div class="login-card">
        <div class="text-center">
            <img src="images/clubify_logo_full_black.png" alt="Clubify Logo" class="logo" />
        </div>
        <h2 class="text-center">Welcome back to Clubify</h2>
        <p class="text-center">
            Please log in to continue managing your clubs and events.
        </p>
        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="InputEmail" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="InputEmail">Email address</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="InputPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Password" />
                <label for="InputPassword">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-check mb-3 text-start">
                <InputCheckbox @bind-Value="Input.RememberMe" id="InputRememberMe" class="form-check-input" />
                <label for="InputRememberMe" class="form-check-label">Remember me</label>
            </div>

            <button type="submit" class="login-button">Log in</button>
        </EditForm>

        <div class="mt-4 text-center">
            <p class="mb-2">
                <a href="/account/forgotpassword" class="link-secondary">Forgot your password?</a>
            </p>
            <p class="mb-2">
                <a href="/account/register" class="link-secondary">Register a new account</a>
            </p>
            <p>
                <a href="/account/resendemailconfirmation" class="link-secondary">Resend email confirmation</a>
            </p>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");

            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user != null)
            {
                var roles = await UserManager.GetRolesAsync(user);

                if (roles.Contains("Admin"))
                {
                    NavigationManager.NavigateTo("/dashboard");
                }
                else
                {
                    NavigationManager.NavigateTo("/userhome");
                }
            }
            else
            {
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Invalid login attempt. Please check your email and password.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}