@page "/clubs/members/{clubId:int}"

@using Microsoft.AspNetCore.Identity
@using Clubify.Data
@using Clubify.Data.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore

@inject Clubify.Data.ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Admin")]

<h3 class="mb-4">Club Members</h3>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/clubs">Clubs</a></li>
        <li class="breadcrumb-item active" aria-current="page">Members</li>
    </ol>
</nav>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @successMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (members == null || availableUsers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card mb-4">
        <div class="card-body">
            <h5>Current Members</h5>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Email</th>
                        <th>Joined On</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var member in members)
                    {
                        <tr>
                            <td>@member.User.Email</td>
                            <td>@member.JoinedOn.ToShortDateString()</td>
                            <td>
                                <button class="btn btn-sm btn-danger" @onclick="@(() => RemoveMember(member.Id))">Remove</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <h5>Add New Member</h5>
            <EditForm Model="@newMembership" OnValidSubmit="HandleAddMember">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Select User</label>
                    <InputSelect class="form-select" @bind-Value="newMembership.UserId">
                        <option value="">Select a user</option>
                        @foreach (var user in availableUsers)
                        {
                            <option value="@user.Id">@user.Email</option>
                        }
                    </InputSelect>
                </div>

                <button type="submit" class="btn btn-primary">Add Member</button>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int clubId { get; set; }

    private List<Membership> members;
    private List<ApplicationUser> availableUsers;
    private Membership newMembership = new Membership();
    private string successMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            members = await DbContext.Memberships
                .Include(m => m.User)
                .Where(m => m.ClubId == clubId)
                .ToListAsync();

            var memberUserIds = members.Select(m => m.UserId).ToList();
            availableUsers = await UserManager.Users
                .Where(u => !memberUserIds.Contains(u.Id))
                .OrderBy(u => u.Email)
                .ToListAsync();

            newMembership.ClubId = clubId;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading members: {ex.Message}";
        }
    }

    private async Task HandleAddMember()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(newMembership.UserId))
            {
                newMembership.JoinedOn = DateTime.UtcNow;
                DbContext.Memberships.Add(newMembership);
                await DbContext.SaveChangesAsync();
                successMessage = "Member added successfully!";
                await ReloadData();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while adding the member: {ex.Message}";
        }
    }

    private async Task RemoveMember(int membershipId)
    {
        try
        {
            var membership = await DbContext.Memberships.FindAsync(membershipId);
            if (membership != null)
            {
                DbContext.Memberships.Remove(membership);
                await DbContext.SaveChangesAsync();
                successMessage = "Member removed successfully!";
                await ReloadData();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while removing the member: {ex.Message}";
        }
    }

    private async Task ReloadData()
    {
        members = await DbContext.Memberships
            .Include(m => m.User)
            .Where(m => m.ClubId == clubId)
            .ToListAsync();

        var memberUserIds = members.Select(m => m.UserId).ToList();
        availableUsers = await UserManager.Users
            .Where(u => !memberUserIds.Contains(u.Id))
            .OrderBy(u => u.Email)
            .ToListAsync();

        newMembership = new Membership { ClubId = clubId };
    }

}