@page "/clubs/create"

@using Clubify.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore

@inject Clubify.Data.ApplicationDbContext DbContext
@inject NavigationManager Navigation

@attribute [Authorize(Roles = "Admin")]

<h3 class="mb-4">Create a New Club</h3>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/clubs">Clubs</a></li>
        <li class="breadcrumb-item active" aria-current="page">Create</li>
    </ol>
</nav>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @successMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="card">
    <div class="card-body">
        <EditForm Model="@newClub" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" class="form-control" @bind-Value="newClub.Name" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" class="form-control" @bind-Value="newClub.Description" />
            </div>

            <button type="submit" class="btn btn-primary me-2">Create Club</button>
            <a class="btn btn-secondary" href="/clubs">Cancel</a>
        </EditForm>
    </div>
</div>

@code {
    private Club newClub = new Club();
    private string successMessage;
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            DbContext.Clubs.Add(newClub);
            await DbContext.SaveChangesAsync();
            successMessage = "Club created successfully!";
            await Task.Delay(1000);
            Navigation.NavigateTo("/clubs");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while creating the club: {ex.Message}";
        }
    }
}
