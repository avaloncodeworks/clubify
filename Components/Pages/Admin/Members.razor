@page "/admin/members"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Clubify.Data.Models
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Manage Members</PageTitle>

<ConfirmDialog @ref="confirmDialog" Title="@confirmTitle" Message="@confirmMessage" OnConfirm="@OnConfirm" />

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
        @errorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
else if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 60vh;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container-fluid py-4">
        <h2 class="membership-title">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                 viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                 stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-users">
                <path d="M17 21v-2a4 4 0 0 0-3-3.87"></path>
                <path d="M7 21v-2a4 4 0 0 1 3-3.87"></path>
                <path d="M12 7a4 4 0 1 0 0-8 4 4 0 0 0 0 8z"></path>
            </svg>
            Membership Management
        </h2>

        <table class="table table-hover">
            <thead class="table-light">
                <tr>
                    <th>Email</th>
                    <th>Joined On</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var membership in memberships)
                {
                    <tr>
                        <td data-label="Email">@membership.User.Email</td>
                        <td data-label="Joined On">@membership.JoinedOn.ToString("dd MMM yyyy")</td>
                        <td data-label="Status">
                            @if (membership.IsApproved)
                            {
                                <span class="badge bg-success">Approved</span>
                            }
                            else
                            {
                                <span class="badge bg-warning text-dark">Pending</span>
                            }
                        </td>
                        <td data-label="Actions">
                            @if (!membership.IsApproved)
                            {
                                <span class="icon-action me-2" title="Approve" @onclick="@(() => ShowConfirm("Approve Member", "Are you sure you want to approve this member?", () => ApproveMember(membership.Id)))">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24"
                                         fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                         class="lucide lucide-check-circle">
                                        <path d="M22 11.08V12a10 10 0 11-5.93-9.14"></path>
                                        <polyline points="22 4 12 14.01 9 11"></polyline>
                                    </svg>
                                </span>
                                <span class="icon-action me-2" title="Reject" @onclick="@(() => ShowConfirm("Reject Member", "Are you sure you want to reject this member?", () => RejectMember(membership.Id)))">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24"
                                         fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                         class="lucide lucide-x-circle">
                                        <circle cx="12" cy="12" r="10"></circle>
                                        <line x1="15" y1="9" x2="9" y2="15"></line>
                                        <line x1="9" y1="9" x2="15" y2="15"></line>
                                    </svg>
                                </span>
                            }
                            <span class="icon-action me-2" title="Edit" @onclick="@(() => EditMember(membership.Id))">
                                <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24"
                                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                     class="lucide lucide-edit-2">
                                    <path d="M17 3a2.83 2.83 0 014 4L7 21H3v-4L17 3z"></path>
                                </svg>
                            </span>
                            <span class="icon-action" title="Delete" @onclick="@(() => ShowConfirm("Delete Member", "Are you sure you want to delete this member?", () => DeleteMember(membership.Id)))">
                                <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24"
                                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                     class="lucide lucide-trash-2">
                                    <polyline points="3 6 5 6 21 6"></polyline>
                                    <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"></path>
                                    <path d="M10 11v6"></path>
                                    <path d="M14 11v6"></path>
                                </svg>
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private ConfirmDialog? confirmDialog;
    private string confirmTitle = "";
    private string confirmMessage = "";
    private Func<Task>? onConfirmAction;

    private List<Membership> memberships = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var clubIdClaim = user.FindFirst("ClubId")?.Value;
            if (!int.TryParse(clubIdClaim, out var clubId))
            {
                errorMessage = "Club ID not found. Please contact support.";
                return;
            }

            memberships = await DbContext.Memberships
            .Where(m => m.ClubId == clubId && !m.IsRejected)
            .Include(m => m.User)
            .OrderByDescending(m => m.JoinedOn)
            .ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading memberships: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowConfirm(string title, string message, Func<Task> confirmAction)
    {
        confirmTitle = title;
        confirmMessage = message;
        onConfirmAction = confirmAction;
        confirmDialog?.Show();
    }

    private async Task OnConfirm()
    {
        if (onConfirmAction is not null)
        {
            await onConfirmAction();
        }
    }

    private async Task ApproveMember(int membershipId)
    {
        var membership = await DbContext.Memberships.FindAsync(membershipId);
        if (membership != null)
        {
            membership.IsApproved = true;
            await DbContext.SaveChangesAsync();
            memberships.First(m => m.Id == membershipId).IsApproved = true;
            StateHasChanged();
        }
    }

    private async Task RejectMember(int membershipId)
    {
        var membership = await DbContext.Memberships.FindAsync(membershipId);
        if (membership != null)
        {
            membership.IsRejected = true;
            membership.IsActive = false;
            await DbContext.SaveChangesAsync();

            memberships.RemoveAll(m => m.Id == membershipId);
            StateHasChanged();
        }
    }

    private void EditMember(int membershipId)
    {
        // To be implemented — will navigate to edit page or open a modal
    }

    private async Task DeleteMember(int membershipId)
    {
        var membership = await DbContext.Memberships.FindAsync(membershipId);
        if (membership != null)
        {
            DbContext.Memberships.Remove(membership);
            await DbContext.SaveChangesAsync();
            memberships.RemoveAll(m => m.Id == membershipId);
            StateHasChanged();
        }
    }
}
