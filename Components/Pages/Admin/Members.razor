@page "/admin/members"
@attribute [Authorize(Roles = "Admin")]

@using Clubify.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Clubify.Data.Models

@inject IMembershipService MembershipsService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Manage Members</PageTitle>

<ConfirmDialog @ref="confirmDialog" Title="@confirmTitle" Message="@confirmMessage" OnConfirm="@OnConfirm" />

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
        @errorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
else if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 60vh;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container-fluid py-4">

        <h2 class="membership-title mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                 viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                 stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-users">
                <path d="M17 21v-2a4 4 0 0 0-3-3.87"></path>
                <path d="M7 21v-2a4 4 0 0 1 3-3.87"></path>
                <path d="M12 7a4 4 0 1 0 0-8 4 4 0 0 0 0 8z"></path>
            </svg>
            Membership Management
        </h2>

        <LicenseUsage ClubId="@clubId"
                      OnLicenseLoaded="HandleLicenseLoaded"
                      OnUpgrade="HandleUpgradeRequested" />

        <table class="table table-hover mt-4">
            <thead class="table-light">
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Joined On</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
                <tr>
                    <th>
                        <input class="form-control form-control-sm"
                               placeholder="Search by first name"
                               @bind="FirstNameFilter"
                               @bind:event="oninput"
                               style="width: 100%;" />
                    </th>
                    <th>
                        <input class="form-control form-control-sm"
                               placeholder="Search by last name"
                               @bind="LastNameFilter"
                               @bind:event="oninput"
                               style="width: 100%;" />
                    </th>
                    <th>
                        <input class="form-control form-control-sm"
                               placeholder="Search by email"
                               @bind="SearchTerm"
                               @bind:event="oninput"
                               style="width: 100%;" />
                    </th>
                    <th></th>
                    <th>
                        <select class="form-select form-select-sm" @bind="StatusFilter" style="width: 100%;">
                            <option value="">All Statuses</option>
                            <option value="approved">Approved</option>
                            <option value="pending">Pending</option>
                        </select>
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (memberships?.Any() ?? false)
                {
                    @foreach (var membership in memberships)
                    {
                        <tr>
                            <td data-label="First Name">@membership.FirstName</td>
                            <td data-label="Last Name">@membership.LastName</td>
                            <td data-label="Email">@membership.Email</td>
                            <td data-label="Joined On">@membership.JoinedOn.ToString("dd MMM yyyy")</td>
                            <td data-label="Status">
                                @if (membership.IsApproved)
                                {
                                    <span class="badge bg-success">Approved</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning text-dark">Pending</span>
                                }
                            </td>
                            <td data-label="Actions">
                                @if (!membership.IsApproved)
                                {
                                    <span class="icon-action me-2"
                                          title="Approve"
                                          @onclick="@(licenseUsage != null && licenseUsage.IsAtCap ? null : () => ShowConfirm("Approve Member", "Are you sure you want to approve this member?", () => ApproveMember(membership.Id)))"
                                          style="cursor:@(licenseUsage != null && licenseUsage.IsAtCap ? "not-allowed" : "pointer"); opacity:@(licenseUsage != null && licenseUsage.IsAtCap ? 0.5 : 1)">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24"
                                             fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                             class="lucide lucide-check-circle">
                                            <path d="M22 11.08V12a10 10 0 11-5.93-9.14"></path>
                                            <polyline points="22 4 12 14.01 9 11"></polyline>
                                        </svg>
                                    </span>
                                    <span class="icon-action me-2" title="Reject" @onclick="@(() => ShowConfirm("Reject Member", "Are you sure you want to reject this member?", () => RejectMember(membership.Id)))">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24"
                                             fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                             class="lucide lucide-x-circle">
                                            <circle cx="12" cy="12" r="10"></circle>
                                            <line x1="15" y1="9" x2="9" y2="15"></line>
                                            <line x1="9" y1="9" x2="15" y2="15"></line>
                                        </svg>
                                    </span>
                                }
                                <span class="icon-action me-2" title="Edit" @onclick="@(() => EditMember(membership.Id))">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24"
                                         fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                         class="lucide lucide-edit-2">
                                        <path d="M17 3a2.83 2.83 0 014 4L7 21H3v-4L17 3z"></path>
                                    </svg>
                                </span>
                                <span class="icon-action" title="Delete" @onclick="@(() => ShowConfirm("Delete Member", "Are you sure you want to delete this member?", () => DeleteMember(membership.Id)))">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24"
                                         fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                         class="lucide lucide-trash-2">
                                        <polyline points="3 6 5 6 21 6"></polyline>
                                        <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6"></path>
                                        <path d="M10 11v6"></path>
                                        <path d="M14 11v6"></path>
                                    </svg>
                                </span>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="4" class="text-center">No members found.</td></tr>
                }
            </tbody>
        </table>
    </div>
}

@if (selectedMembershipId.HasValue)
{
    <EditMemberModal MembershipId="@selectedMembershipId.Value"
                     OnMemberUpdated="@OnEditCompleted"
                     OnClose="@CloseEditModal" />
}

@if (showUpgradeModal)
{
    <UpgradeLicenseModal ClubId="@clubId"
                         CurrentTierId="@currentTierId"
                         OnClose="@(() => showUpgradeModal = false)" />
}

@code {
    private ConfirmDialog? confirmDialog;
    private string confirmTitle = "";
    private string confirmMessage = "";
    private Func<Task>? onConfirmAction;

    private List<MembershipDto> memberships = new();
    private bool isLoading = true;
    private string? errorMessage;

    private int? selectedMembershipId;
    private int clubId;

    private string searchTerm = string.Empty;
    private string statusFilter = string.Empty;
    private string firstNameFilter = string.Empty;
    private string lastNameFilter = string.Empty;

    private System.Threading.Timer? _debounceTimer;
    private const int DebounceDelay = 300;

    private LicenseUsageDto? licenseUsage;

    private bool showUpgradeModal = false;

    private int currentTierId;

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            _debounceTimer?.Dispose();
            _debounceTimer = new System.Threading.Timer(async _ =>
            {
                await InvokeAsync(LoadMemberships);
            }, null, DebounceDelay, System.Threading.Timeout.Infinite);
        }
    }

    private string FirstNameFilter
    {
        get => firstNameFilter;
        set
        {
            firstNameFilter = value;
            _debounceTimer?.Dispose();
            _debounceTimer = new System.Threading.Timer(async _ =>
            {
                await InvokeAsync(LoadMemberships);
            }, null, DebounceDelay, System.Threading.Timeout.Infinite);
        }
    }

    private string LastNameFilter
    {
        get => lastNameFilter;
        set
        {
            lastNameFilter = value;
            _debounceTimer?.Dispose();
            _debounceTimer = new System.Threading.Timer(async _ =>
            {
                await InvokeAsync(LoadMemberships);
            }, null, DebounceDelay, System.Threading.Timeout.Infinite);
        }
    }

    private string StatusFilter
    {
        get => statusFilter;
        set
        {
            if (statusFilter != value)
            {
                statusFilter = value;
                _ = LoadMemberships();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var clubIdClaim = user.FindFirst("ClubId")?.Value;
            if (!int.TryParse(clubIdClaim, out clubId))
            {
                errorMessage = "Club ID not found. Please contact support.";
                return;
            }

            await LoadMemberships();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading memberships: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void HandleLicenseLoaded(LicenseUsageDto usage)
    {
        licenseUsage = usage;
        currentTierId = usage.CurrentTierId;
        StateHasChanged();
    }

    private async Task LoadMemberships()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            memberships = await MembershipsService.GetMembershipsAsync(
                clubId,
                searchTerm,
                statusFilter,
                firstNameFilter,
                lastNameFilter
            );
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading memberships: {ex.Message}";
            memberships = new List<MembershipDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnFilterChanged(ChangeEventArgs e)
    {
        statusFilter = e.Value?.ToString() ?? string.Empty;
        await LoadMemberships();
    }

    private void ShowConfirm(string title, string message, Func<Task> confirmAction)
    {
        confirmTitle = title;
        confirmMessage = message;
        onConfirmAction = confirmAction;
        confirmDialog?.Show();
    }

    private async Task OnConfirm()
    {
        if (onConfirmAction is not null)
        {
            await onConfirmAction();
        }
    }

    private async Task ApproveMember(int membershipId)
    {
        try
        {
            var result = await MembershipsService.ApproveMembershipAsync(membershipId);

            if (result)
            {
                var membership = memberships.FirstOrDefault(m => m.Id == membershipId);
                if (membership != null)
                {
                    membership.IsApproved = true;
                    StateHasChanged();
                }
            }
            else
            {
                errorMessage = "Failed to approve member.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error approving member: {ex.Message}";
        }
    }

    private async Task RejectMember(int membershipId)
    {
        try
        {
            var result = await MembershipsService.RejectMembershipAsync(membershipId);
            if (result)
            {
                memberships.RemoveAll(m => m.Id == membershipId);
                StateHasChanged();
            }
            else
            {
                errorMessage = "Failed to reject member.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error rejecting member: {ex.Message}";
        }
    }

    private async Task DeleteMember(int membershipId)
    {
        try
        {
            var result = await MembershipsService.DeleteMembershipAsync(membershipId);
            if (result)
            {
                memberships.RemoveAll(m => m.Id == membershipId);
                StateHasChanged();
            }
            else
            {
                errorMessage = "Failed to delete member.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting member: {ex.Message}";
        }
    }

    private void EditMember(int membershipId)
    {
        selectedMembershipId = membershipId;
    }

    private void CloseEditModal()
    {
        selectedMembershipId = null;
    }

    private async Task OnEditCompleted()
    {
        await LoadMemberships();
    }

    private void HandleUpgradeRequested()
    {
        showUpgradeModal = true;
    }
}