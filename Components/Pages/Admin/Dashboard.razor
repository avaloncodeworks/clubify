@page "/admin/dashboard"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Club Dashboard</PageTitle>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
        @errorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 60vh;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container-fluid py-4">
        <!-- Welcome Card -->
        <div class="welcome-card mb-4">
            <h2 class="fw-bold mb-2">Welcome, @userName!</h2>
            <p class="mb-0 text-muted">Here’s what’s happening in your club today.</p>
        </div>

        <!-- Top Stats -->
        <div class="row g-4 mb-4">
            <div class="col-md-3">
                <div class="dashboard-card">
                    <h6>Total Events</h6>
                    <h3>@totalEvents</h3>
                </div>
            </div>
            <div class="col-md-3">
                <div class="dashboard-card">
                    <h6>Total Members</h6>
                    <h3>@totalMembers</h3>
                </div>
            </div>
            <!-- Add more cards here if needed -->
        </div>

        <!-- Recent Data -->
        <div class="row g-4 mb-4">
            <div class="col-lg-6">
                <div class="dashboard-card">
                    <h6>Recent Events</h6>
                    @if (recentEvents.Any())
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var evt in recentEvents)
                            {
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>@evt.Title</span>
                                    <span class="badge bg-secondary">@evt.StartDate.ToString("dd MMM yyyy")</span>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted mb-0">No recent events found.</p>
                    }
                </div>
            </div>
            <div class="col-lg-6">
                <div class="dashboard-card">
                    <h6>Recent Memberships</h6>
                    @if (recentMemberships.Any())
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var member in recentMemberships)
                            {
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>@member.User?.Email ?? "N/A"</span>
                                    <span class="badge bg-info">@member.JoinedOn.ToString("dd MMM yyyy")</span>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted mb-0">No recent memberships found.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string? errorMessage;
    private bool isLoading = true;
    private string clubName;
    private int totalEvents;
    private int totalMembers;
    private List<Event> recentEvents = new();
    private List<Membership> recentMemberships = new();
    private string userName = "Admin";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            userName = user.Identity?.Name ?? "Admin";

            var clubIdClaim = user.FindFirst("ClubId")?.Value;

            if (!int.TryParse(clubIdClaim, out var clubId))
            {
                errorMessage = "Club ID not found. Please contact support.";
                return;
            }

            var club = await DbContext.Clubs.FirstOrDefaultAsync(c => c.Id == clubId);
            if (club == null)
            {
                errorMessage = "Club not found. Please contact support.";
                return;
            }

            clubName = club.Name;

            totalEvents = await DbContext.Events
                .Where(e => e.ClubId == clubId)
                .CountAsync();

            totalMembers = await DbContext.Memberships
                .Where(m => m.ClubId == clubId)
                .CountAsync();

            recentEvents = await DbContext.Events
                .Where(e => e.ClubId == clubId)
                .OrderByDescending(e => e.StartDate)
                .Take(5)
                .ToListAsync();

            recentMemberships = await DbContext.Memberships
                .Include(m => m.User)
                .Where(m => m.ClubId == clubId)
                .OrderByDescending(m => m.JoinedOn)
                .Take(5)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading dashboard data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}