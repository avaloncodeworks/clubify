@page "/admin/dashboard"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Clubify.Data
@using Clubify.Data.Models
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Club Dashboard</PageTitle>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="dashboard-card mb-4">
        <h5>Welcome to @clubName Dashboard</h5>
    </div>

    <div class="row">
        <div class="col-md-4 mb-3">
            <div class="dashboard-card">
                <h5>Total Events</h5>
                <p>@totalEvents</p>
            </div>
        </div>
        <div class="col-md-4 mb-3">
            <div class="dashboard-card">
                <h5>Total Members</h5>
                <p>@totalMembers</p>
            </div>
        </div>
    </div>

    <div class="table-container mt-4">
        <h5>Recent Events</h5>
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Start Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in recentEvents)
                {
                    <tr>
                        <td>@e.Title</td>
                        <td>@e.StartDate.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="table-container mt-4">
        <h5>Recent Memberships</h5>
        <table class="table">
            <thead>
                <tr>
                    <th>User</th>
                    <th>Joined On</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var m in recentMemberships)
                {
                    <tr>
                        <td>@m.User.Email</td>
                        <td>@m.JoinedOn.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private string clubName;
    private int totalEvents;
    private int totalMembers;
    private List<Event> recentEvents = new();
    private List<Membership> recentMemberships = new();
    private string errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var clubIdClaim = user.FindFirst("ClubId")?.Value;
            if (!int.TryParse(clubIdClaim, out var clubId))
            {
                errorMessage = "Club ID not found. Please contact support.";
                return;
            }

            var club = await DbContext.Clubs.FirstOrDefaultAsync(c => c.Id == clubId);
            if (club == null)
            {
                errorMessage = "Club not found. Please contact support.";
                return;
            }

            clubName = club.Name;

            totalEvents = await DbContext.Events
                .Where(e => e.ClubId == clubId)
                .CountAsync();

            totalMembers = await DbContext.Memberships
                .Where(m => m.ClubId == clubId)
                .CountAsync();

            recentEvents = await DbContext.Events
                .Where(e => e.ClubId == clubId)
                .OrderByDescending(e => e.StartDate)
                .Take(5)
                .ToListAsync();

            recentMemberships = await DbContext.Memberships
                .Include(m => m.User)
                .Where(m => m.ClubId == clubId)
                .OrderByDescending(m => m.JoinedOn)
                .Take(5)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading dashboard data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
