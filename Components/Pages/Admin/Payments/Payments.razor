@page "/admin/payments"

@using Clubify.Data.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization

@inject Clubify.Data.ApplicationDbContext DbContext

@attribute [Authorize(Roles = "Admin")]

<h3 class="mb-4">Payments Management</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <!-- Filter and Page Size Section -->
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Filter Payments</h5>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="emailFilter" class="form-label">Search by Email</label>
                    <input id="emailFilter" class="form-control" @bind="emailFilter" @bind:event="oninput" />
                </div>
                <div class="col-md-4">
                    <label for="methodFilter" class="form-label">Filter by Method</label>
                    <select id="methodFilter" class="form-select" @bind="methodFilter">
                        <option value="">-- All --</option>
                        @foreach (var method in paymentMethods)
                        {
                            <option value="@method">@method</option>
                        }
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="pageSize" class="form-label">Page Size</label>
                    <select id="pageSize" class="form-select" @onchange="PageSizeChanged">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                    </select>
                </div>
            </div>
            <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
            <button class="btn btn-secondary ms-2" @onclick="ClearFilters">Clear</button>
        </div>
    </div>

    <!-- Payments Table -->
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">All Payments</h5>
            <div class="table-responsive">
                <table class="table table-bordered table-striped align-middle">
                    <thead>
                        <tr>
                            <th>
                                <button class='btn btn-link p-0' @onclick='() => SortBy("Membership")'>
                                    Membership
                                    @if (currentSortColumn == "Membership")
                                    {
                                        <i class="bi @(sortAscending ? "bi-caret-up-fill" : "bi-caret-down-fill")"></i>
                                    }
                                </button>
                            </th>
                            <th>
                                <button class='btn btn-link p-0' @onclick='() => SortBy("Amount")'>
                                    Amount
                                    @if (currentSortColumn == "Amount")
                                    {
                                        <i class="bi @(sortAscending ? "bi-caret-up-fill" : "bi-caret-down-fill")"></i>
                                    }
                                </button>
                            </th>
                            <th>
                                <button class='btn btn-link p-0' @onclick='() => SortBy("PaymentDate")'>
                                    Payment Date
                                    @if (currentSortColumn == "PaymentDate")
                                    {
                                        <i class="bi @(sortAscending ? "bi-caret-up-fill" : "bi-caret-down-fill")"></i>
                                    }
                                </button>
                            </th>
                            <th>Method</th>
                            <th>Notes</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var payment in payments)
                        {
                            <tr>
                                <td>@($"{payment.Membership.User.Email} - {payment.Membership.Club.Name}")</td>
                                <td>@payment.Amount.ToString("C")</td>
                                <td>@payment.PaymentDate.ToShortDateString()</td>
                                <td>
                                    <span class="badge bg-secondary">@payment.PaymentMethod</span>
                                </td>
                                <td>@payment.Notes</td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-warning me-1"
                                            @onclick="() => EditPayment(payment.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger"
                                            @onclick="() => ShowDeleteModal(payment.Id)"
                                            disabled="@(isEditing)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                @if (showDeleteModal)
                {
                    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Confirm Delete</h5>
                                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                                </div>
                                <div class="modal-body">
                                    <p>Are you sure you want to delete this payment?</p>
                                </div>
                                <div class="modal-footer">
                                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Pagination Controls -->
    <div class="pagination-container d-flex justify-content-center align-items-center mt-3">
        <button class="btn btn-outline-primary me-2"
                @onclick="PreviousPage"
                disabled="@(currentPage == 1)">
            Previous
        </button>

        @for (int i = 1; i <= totalPages; i++)
        {
            <button class="btn @(i == currentPage ? "btn-primary" : "btn-outline-primary") me-1"
                    @onclick="() => GoToPage(i)">
                @i
            </button>
        }

        <button class="btn btn-outline-primary ms-2"
                @onclick="NextPage"
                disabled="@(currentPage == totalPages)">
            Next
        </button>
    </div>

    <!-- Add Payment Form -->
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Add New Payment</h5>
            <EditForm Model="@newPayment" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Membership -->
                <div class="mb-3">
                    <label for="membershipId" class="form-label">Membership</label>
                    <select id="membershipId" class="form-select" @bind="newPayment.MembershipId" required>
                        <option value="">-- Select Membership --</option>
                        @foreach (var membership in memberships)
                        {
                            <option value="@membership.Id">
                                @($"{membership.User.Email} - {membership.Club.Name}")
                            </option>
                        }
                    </select>
                    <ValidationMessage For="@(() => newPayment.MembershipId)" />
                </div>

                <!-- Amount -->
                <div class="mb-3">
                    <label for="amount" class="form-label">Amount</label>
                    <InputNumber id="amount" class="form-control" @bind-Value="newPayment.Amount" required />
                    <ValidationMessage For="@(() => newPayment.Amount)" />
                </div>

                <!-- Payment Date -->
                <div class="mb-3">
                    <label for="paymentDate" class="form-label">Payment Date</label>
                    <InputDate id="paymentDate" class="form-control" @bind-Value="newPayment.PaymentDate" required />
                    <ValidationMessage For="@(() => newPayment.PaymentDate)" />
                </div>

                <!-- Payment Method -->
                <div class="mb-3">
                    <label for="paymentMethod" class="form-label">Payment Method</label>
                    <InputText id="paymentMethod" class="form-control" @bind-Value="newPayment.PaymentMethod" required />
                    <ValidationMessage For="@(() => newPayment.PaymentMethod)" />
                </div>

                <!-- Notes -->
                <div class="mb-3">
                    <label for="notes" class="form-label">Notes</label>
                    <InputText id="notes" class="form-control" @bind-Value="newPayment.Notes" />
                    <ValidationMessage For="@(() => newPayment.Notes)" />
                </div>

                <!-- Submit Buttons -->
                <button type="submit" class="btn btn-success">@(isEditing ? "Update Payment" : "Add Payment")</button>
                @if (isEditing)
                {
                    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel Edit</button>
                }
            </EditForm>
        </div>
    </div>
}

@code {
    private List<Payment> payments = new();
    private List<Membership> memberships = new();
    private Payment newPayment = new()
    {
        PaymentDate = DateTime.UtcNow,
        PaymentMethod = "Cash"
    };

    private string errorMessage;
    private bool isLoading = true;

    private string emailFilter = "";
    private string methodFilter = "";
    private List<string> paymentMethods = new() { "Cash", "Bank Transfer", "Check" };

    private string currentSortColumn = "PaymentDate";
    private bool sortAscending = false;

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPayments;
    private int totalPages;

    private bool isEditing = false; 
    private bool showDeleteModal = false;
    private int paymentIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            memberships = await DbContext.Memberships
                .Include(m => m.User)
                .Include(m => m.Club)
                .OrderBy(m => m.User.Email)
                .ToListAsync();

            await LoadPayments();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPayments()
    {
        var query = DbContext.Payments
            .Include(p => p.Membership)
                .ThenInclude(m => m.User)
            .Include(p => p.Membership)
                .ThenInclude(m => m.Club)
            .AsQueryable();

        if (!string.IsNullOrWhiteSpace(emailFilter))
        {
            query = query.Where(p => p.Membership.User.Email.Contains(emailFilter));
        }

        if (!string.IsNullOrWhiteSpace(methodFilter))
        {
            query = query.Where(p => p.PaymentMethod == methodFilter);
        }

        totalPayments = await query.CountAsync();
        totalPages = (int)Math.Ceiling(totalPayments / (double)pageSize);

        query = currentSortColumn switch
        {
            "Membership" => sortAscending
                ? query.OrderBy(p => p.Membership.User.Email)
                : query.OrderByDescending(p => p.Membership.User.Email),

            "Amount" => sortAscending
                ? query.OrderBy(p => p.Amount)
                : query.OrderByDescending(p => p.Amount),

            "PaymentDate" => sortAscending
                ? query.OrderBy(p => p.PaymentDate)
                : query.OrderByDescending(p => p.PaymentDate),

            _ => query.OrderByDescending(p => p.PaymentDate)
        };

        payments = await query
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadPayments();
    }

    private async Task ClearFilters()
    {
        emailFilter = "";
        methodFilter = "";
        currentSortColumn = "PaymentDate";
        sortAscending = false;
        currentPage = 1;
        await LoadPayments();
    }

    private async Task SortBy(string column)
    {
        if (currentSortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            currentSortColumn = column;
            sortAscending = true;
        }

        currentPage = 1;
        await LoadPayments();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadPayments();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadPayments();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadPayments();
        }
    }

    private async Task PageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedPageSize))
        {
            pageSize = selectedPageSize;
            currentPage = 1;
            await LoadPayments();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (isEditing)
            {
                // Edit existing payment
                var existingPayment = await DbContext.Payments.FindAsync(newPayment.Id);
                if (existingPayment != null)
                {
                    existingPayment.MembershipId = newPayment.MembershipId;
                    existingPayment.Amount = newPayment.Amount;
                    existingPayment.PaymentDate = newPayment.PaymentDate;
                    existingPayment.PaymentMethod = newPayment.PaymentMethod;
                    existingPayment.Notes = newPayment.Notes;

                    await DbContext.SaveChangesAsync();

                    // Refresh local list
                    await LoadPayments();
                }

                isEditing = false;
            }
            else
            {
                // Add new payment
                DbContext.Payments.Add(newPayment);
                await DbContext.SaveChangesAsync();

                payments.Insert(0, newPayment);

                // Also update membership status here if needed (see earlier step)
                var membership = await DbContext.Memberships
                    .FirstOrDefaultAsync(m => m.Id == newPayment.MembershipId);
                if (membership != null)
                {
                    membership.IsActive = true;
                    membership.ExpiryDate = (membership.ExpiryDate > DateTime.UtcNow
                        ? membership.ExpiryDate
                        : DateTime.UtcNow).AddYears(1);
                    await DbContext.SaveChangesAsync();
                }
            }

            // Reset form
            newPayment = new Payment
                {
                    PaymentDate = DateTime.UtcNow,
                    PaymentMethod = "Cash"
                };
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving payment: {ex.Message}";
        }
    }

    private async Task DeletePayment(int paymentId)
    {
        try
        {
            var paymentToDelete = await DbContext.Payments.FindAsync(paymentId);
            if (paymentToDelete != null)
            {
                DbContext.Payments.Remove(paymentToDelete);
                await DbContext.SaveChangesAsync();

                payments.Remove(paymentToDelete);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting payment: {ex.Message}";
        }
    }

    private async Task EditPayment(int paymentId)
    {
        var paymentToEdit = await DbContext.Payments
            .Include(p => p.Membership)
            .FirstOrDefaultAsync(p => p.Id == paymentId);

        if (paymentToEdit != null)
        {
            newPayment = new Payment
                {
                    Id = paymentToEdit.Id,
                    MembershipId = paymentToEdit.MembershipId,
                    Amount = paymentToEdit.Amount,
                    PaymentDate = paymentToEdit.PaymentDate,
                    PaymentMethod = paymentToEdit.PaymentMethod,
                    Notes = paymentToEdit.Notes
                };

            isEditing = true;
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        newPayment = new Payment
            {
                PaymentDate = DateTime.UtcNow,
                PaymentMethod = "Cash"
            };
    }

    private void ShowDeleteModal(int paymentId)
    {
        paymentIdToDelete = paymentId;
        showDeleteModal = true;
    }

    private async Task ConfirmDelete()
    {
        await DeletePayment(paymentIdToDelete);
        CloseDeleteModal();
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        paymentIdToDelete = 0;
    }
}