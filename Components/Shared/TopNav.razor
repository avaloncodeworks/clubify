@inject IJSRuntime JS

<nav class="topnav">
    <div class="topnav-left">
        <div class="sidebar-toggle-wrapper">
            <button class="sidebar-toggle" @onclick="() => OnToggleSidebar.InvokeAsync(null)">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor"
                     stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                     class="lucide lucide-menu">
                    <line x1="3" y1="12" x2="21" y2="12"></line>
                    <line x1="3" y1="6" x2="21" y2="6"></line>
                    <line x1="3" y1="18" x2="21" y2="18"></line>
                </svg>
            </button>
        </div>
    </div>

    <div class="topnav-center">
        <div class="search-container">
            <input type="text" placeholder="Search..." />
            <div class="icon-search">
                <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor"
                     stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                     class="lucide lucide-search">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
            </div>
        </div>
    </div>

    <div class="topnav-right">
        <!-- Mobile mode side Toggle Button -->
        <button class="sidebar-toggle mobile-only" @onclick="ToggleMobileSidebar">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                 viewBox="0 0 24 24" fill="none" stroke="currentColor"
                 stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                 class="lucide lucide-menu">
                <line x1="3" y1="12" x2="21" y2="12"></line>
                <line x1="3" y1="6" x2="21" y2="6"></line>
                <line x1="3" y1="18" x2="21" y2="18"></line>
            </svg>
        </button>

        <div class="notifications">
            <div class="icon-bell">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor"
                     stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                     class="lucide lucide-bell">
                    <path d="M18 8a6 6 0 00-12 0c0 7-3 9-3 9h18s-3-2-3-9" />
                    <path d="M13.73 21a2 2 0 01-3.46 0" />
                </svg>
            </div>
            <span class="badge">3</span>
        </div>

        <!-- Dark Mode Toggle Button -->
        <div class="icon-dark-mode" @onclick="ToggleDarkMode" aria-label="Toggle Dark Mode" style="cursor: pointer;">
            @if (isDarkMode)
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor"
                     stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                     class="lucide lucide-sun">
                    <circle cx="12" cy="12" r="4"></circle>
                    <path d="M12 2v2"></path>
                    <path d="M12 20v2"></path>
                    <path d="M4.93 4.93l1.41 1.41"></path>
                    <path d="M17.66 17.66l1.41 1.41"></path>
                    <path d="M2 12h2"></path>
                    <path d="M20 12h2"></path>
                    <path d="M4.93 19.07l1.41-1.41"></path>
                    <path d="M17.66 6.34l1.41-1.41"></path>
                </svg>
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor"
                     stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                     class="lucide lucide-moon">
                    <path d="M21 12.79A9 9 0 1111.21 3a7 7 0 109.79 9.79z"></path>
                </svg>
            }
        </div>

        <div id="avatarDropdown" class="avatar @(isDropdownOpen ? "dropdown-open" : "")" @onclick="ToggleDropdown" aria-haspopup="true" aria-expanded="@isDropdownOpen">
            <img src="/images/avatar.jpg" alt="User Avatar" />
            <div class="icon-caret-down">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor"
                     stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                     class="lucide lucide-chevron-down">
                    <polyline points="6 9 12 15 18 9"></polyline>
                </svg>

            </div>
            <div id="dropdownMenu" class="dropdown-menu @(isDropdownOpen ? "show" : "") @(isDropdownClosing ? "closing" : "")" tabindex="-1" role="menu">
                <a href="#" role="menuitem">
                    <div class="dropdown-item-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                             viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                             stroke-linecap="round" stroke-linejoin="round"
                             class="lucide lucide-user">
                            <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2"></path>
                            <circle cx="12" cy="7" r="4"></circle>
                        </svg>
                    </div>
                    Profile
                </a>
                <a href="#" role="menuitem">
                    <div class="dropdown-item-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                             viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                             stroke-linecap="round" stroke-linejoin="round"
                             class="lucide lucide-settings">
                            <circle cx="12" cy="12" r="3"></circle>
                            <path d="M19.4 15a1.65 1.65 0 00.33 1.82l.06.06a2 2 0 11-2.83 2.83l-.06-.06a1.65 1.65 0 00-1.82-.33 1.65 1.65 0 00-1 1.51V21a2 2 0 11-4 0v-.09a1.65 1.65 0 00-1-1.51 1.65 1.65 0 00-1.82.33l-.06.06a2 2 0 11-2.83-2.83l.06-.06a1.65 1.65 0 00.33-1.82 1.65 1.65 0 00-1.51-1H3a2 2 0 110-4h.09c.74 0 1.39-.4 1.51-1a1.65 1.65 0 00-.33-1.82l-.06-.06a2 2 0 112.83-2.83l.06.06c.44.44 1.08.58 1.66.33a1.65 1.65 0 001-1.51V3a2 2 0 114 0v.09c0 .74.4 1.39 1 1.51.58.24 1.22.1 1.66-.33l.06-.06a2 2 0 112.83 2.83l-.06.06a1.65 1.65 0 00-.33 1.82c.14.6.77 1 1.51 1H21a2 2 0 110 4h-.09c-.74 0-1.39.4-1.51 1z"></path>
                        </svg>
                    </div>
                    Settings
                </a>
                <hr class="dropdown-divider" />
                <a href="#" role="menuitem">
                    <div class="dropdown-item-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                             viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                             stroke-linecap="round" stroke-linejoin="round"
                             class="lucide lucide-log-out">
                            <path d="M9 21H5a2 2 0 01-2-2V5a2 2 0 012-2h4"></path>
                            <polyline points="16 17 21 12 16 7"></polyline>
                            <line x1="21" y1="12" x2="9" y2="12"></line>
                        </svg>
                    </div>
                    Logout
                </a>
            </div>
        </div>
        <div class="mobile-search-toggle" @onclick="ToggleMobileSearch">
            <div class="icon-search">
                <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor"
                     stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                     class="lucide lucide-search">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
            </div>
        </div>
    </div>
</nav>

@if (isMobileSearchOpen)
{
    <div class="mobile-search-overlay">
        <div class="mobile-search-container">
            <input type="text" placeholder="Search..." />
            <button class="close-button" @onclick="CloseMobileSearch">×</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback OnToggleSidebar { get; set; }

    [Parameter]
    public EventCallback OnToggleMobileSidebar { get; set; }

    private bool isDropdownOpen = false;
    private bool isDropdownClosing = false;
    private bool isMobileSearchOpen = false;
    private bool isDarkMode = false;
    private DotNetObjectReference<TopNav>? dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("lucide.createIcons", new { force = true });
    }

    private async Task ToggleDropdown()
    {
        if (!isDropdownOpen)
        {
            isDropdownOpen = true;
            isDropdownClosing = false;

            StateHasChanged();

            dotNetHelper = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerClickOutsideHandler", "avatarDropdown", dotNetHelper);
            await JS.InvokeVoidAsync("focusElementById", "dropdownMenu");
        }
        else
        {
            await CloseDropdownWithAnimation();
        }
    }

    private async Task CloseDropdownWithAnimation()
    {
        isDropdownClosing = true;
        StateHasChanged();

        await Task.Delay(300); // matches the CSS animation duration

        isDropdownOpen = false;
        isDropdownClosing = false;

        await CleanupClickOutside();
        StateHasChanged();
    }

    [JSInvokable]
    public async Task CloseDropdown()
    {
        await CloseDropdownWithAnimation();
    }

    [JSInvokable]
    public async Task CloseDropdownOnEscape()
    {
        await CloseDropdownWithAnimation();
    }

    private async Task CleanupClickOutside()
    {
        await JS.InvokeVoidAsync("unregisterClickOutsideHandler", "avatarDropdown");

        if (dotNetHelper != null)
        {
            dotNetHelper.Dispose();
            dotNetHelper = null;
        }
    }

    private void ToggleMobileSearch()
    {
        isMobileSearchOpen = !isMobileSearchOpen;
    }

    private void CloseMobileSearch()
    {
        isMobileSearchOpen = false;
    }

    private void ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;

        if (isDarkMode)
        {
            JS.InvokeVoidAsync("document.body.classList.add", "dark-mode");
        }
        else
        {
            JS.InvokeVoidAsync("document.body.classList.remove", "dark-mode");
        }
    }

    private async Task ToggleMobileSidebar()
    {
        await OnToggleMobileSidebar.InvokeAsync();
    }
}